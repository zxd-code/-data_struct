The details of crashing balloon problem can be found in ZOJ:

http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=3

The on-line judgement system uses such a rule to test the answer:
Suppose the player gets lower score is b, the one gets higher score is a. and b challenge the score of a.
If a can find a valid factorization, that a = a[1]*a[2]*…*a[n],  b = b[1]*b[2]*…*b[m]， where 2<= a[i], b[j] <=100
, and a[i] !=b[j] if i!=j for all i and j. then a wins the game; otherwise, b wins the game.

However, there will be cases that not fair enough for b. For example, b crashed balloon number 4 and 8, so b = 32;
a told a lie that he got score of 44; although b challenges about this result, a can find a valid factorization, that
a = 4*11, and b = 2*16. Thus a can win the game even in this case despite he is lying on b’s honesty.

Bases on this observation, I think the better method should follows the rules, that who challenges, who should put the
proof. Since b challenge about a’s result. we should ask b to prove that his score can be factorized OK by providing
a valid factorization. Of course b can play trick, but he must provide one of the valid factorization anyway, if b can’t
do this, we can judge b losing the game without need to ask a. But for any (arbitrary) valid factorization given by
b, if a can’t provide a factorization respectively, we judge a losing the game; otherwise, a will win the game.

Based on this rule, here are Programs in Python, Haskell and ANSI C. Although they can’t pass ZOJ, I do think they
have their own values. The programs which can pass ZOJ are given as well.

(All the programs are essentially DFS with explicit recursion)

Python program:

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/solve.py

Haskell program:

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/Solve.hs

ANSI C program

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/solve.c

================================================
题目详情可以参考这里：
http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=3

ZOJ上的判定标准是：
b不服，站出来质疑；
如果a能举证说：你瞧，存在一种合理的解释，a = a[1]*a[2]*…*a[n],  b = b[1]*b[2]*…*b[m]; 其中 2<= a[i], b[j] <=100, 且 a[i] !=b[j] if i!=j
就判断a赢，否则b赢

但是，这里会有对b不利的冤案！例如b踩了气球4和8，于是b = 32 而 a吹牛说自己得了44分，
b不服，但是a狡猾的说，你看，a = 4*11, b=2*16，于是a赢了！b虽然说了实话，a说了假话，
但是仍然b输了。所以我觉得，这道题目应该是按照：谁主张，谁举证的原则来判决。
既然b主张，那么此时法官应该问b，你踩了哪些气球，b当然可以诬告，但是b此时必须说出一种分解，如果b不能分解，那么显然
是诬告，法官不用问a，就判断a赢；
但是针对b说的任意(arbitrary)分解，如果a不能给出一种合理的解释，此时法官就可以判断b赢，否则判断a赢。针对我说的谁主张，谁举证的原则，我给以下Python、Haskell和ANSI C程序，他们都不能通过ZOJ，但是我认为他们依然有价值。同时能通过ZOJ的程序也一并给出。

（另：所有程序本质都是深度优先搜索法，使用显示递归）

程序1，Python：

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/solve.py
程序2， Haskell，谁主张，谁举证：

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/Solve.hs

程序3，ANSI C：

https://github.com/liuxinyu95/AlgoXY/blob/algoxy/others/problems/search/DFS/ACM/crashing-balloon/solve.c

////
There are input.txt and output.txt along with the program, to one quick way to test:
$ diff output.txt <(cat input.txt | python solve.py)
$ diff output.txt <(cat input.txt | runhaskell Solve.hs)
$ ghc --make Solve.hs
$ diff output.txt <(cat input.txt | ./Solve)
