#
# $Id: //stdlib/dev/etc/stdlib/config/gcc.config#32 $
#
# configuration file for gcc
#
##############################################################################

CXX             = gcc
CCVER           = $(shell $(CXX) -dumpversion | sed "s/[^0-9]*\([0-9.]*\).*/\1/g")

# determine the major version of gcc
CXX_MAJOR       = $(shell echo "$(CCVER)" | sed "s/^\([1-9][0-9]*\).*/\1/")
CXX_MINOR       = $(shell echo "$(CCVER)" | sed "s/[1-9]*\.\([0-9]*\).*/\1/")

WARNFLAGS       = -Wall -W -Wcast-qual -Winline -Wshadow -Wwrite-strings

# -Wno-long-long not available prior to 2.90
ifeq ($(shell [ $(CXX_MAJOR) -gt 2 -o $(CXX_MAJOR) -eq 2 -a $(CXX_MINOR) -ge 90 ] && echo 1), 1)
WARNFLAGS      += -Wno-long-long
endif   # gcc >= 2.90


# prevent (bogus?) warnings on SunOS
ifneq ($(OSNAME),SunOS)
WARNFLAGS      += -Wcast-align
else

# prevent gcc 3.x warnings about #pragma ident on SunOS
ifeq ($(CXX_MAJOR),3)
ifeq ($(shell expr $(CXX_MINOR) \< 4),1)
WARNFLAGS      += -Wno-unknown-pragmas
endif   # gcc < 3.4
endif   # gcc == 3.x

endif   # !SunOS

# do not enable -Wunreachable-code: it's useless the way implemented
# ifeq ($(shell expr $(CXX_MAJOR) \> 3 \& $(CXX_MINOR) \> 3),1)
# WARNFLAGS      += -Wunreachable-code
# endif   # gcc > 3.3


DEPENDFLAGS     = -M

# IBM AIX code is always position independent
ifneq ($(OSNAME),AIX)
PICFLAGS        = -fPIC
endif

# mapfile for symbol versioning
MAPFILE         = mapfile.$(CXX)-$(CXX_MAJOR)
LDSOFLAGS       = -shared

ifneq ($(CXX_MAJOR),2)
LDSOFLAGS      += -lsupc++
endif

# -fPIC needed both to compile and link shared libs on HP-UX 11
ifeq ($(OSNAME),HP-UX)
LDSOFLAGS      += -fPIC
endif

CXXFLAGS        = -pedantic -nostdinc++

ifeq ($(CXX_MAJOR),2)
ifeq ($(shell expr $(CXX_MINOR) / 10),9)
CXXFLAGS       += -fhonor-std -ftemplate-depth-32
else
CXXFLAGS       += -ftemplate-depth-32
endif
endif

# prevent (some) assemler errors caused by overly long symbol names
ifeq ($(OSNAME),IRIX64)
CXXFLAGS       += -fsquangle
endif

# prevent (some) assemler errors caused by overly long symbol names
ifeq ($(OSNAME),OSF1)
CXXFLAGS       += -fsquangle
endif

CXXPRELINK      = 

# enable C++ C library headers (the <cname> kind)
CPPFLAGS        = -I$(TOPDIR)/include/ansi

# decrease warning level to prevent annoying linker warnings
# about duplicate symbols (the linker has no concept of weak symbols)
ifeq ($(OSNAME),AIX)
  LDFLAGS = -Wl,-bh:5
endif

ifneq ($(CXX_MAJOR),2)
  # gcc 3.x needs to explicitly link with libsupc++ for language support
  # g++ 3.x links with it as well as libstdc++ automatically
  LDLIBS = -lsupc++
endif

# debug/optimization options
DEBUG_CXXFLAGS  = -g
DEBUG_CPPFLAGS  =

OPTMZ_CXXFLAGS  = -O2
OPTMZ_CPPFLAGS  =

# shared/static library options
SHARED_CXXFLAGS = 
SHARED_CPPFLAGS =
SHARED_LDFLAGS  =

ifeq ($(OSNAME),AIX)
  SHARED_SUFFIX   = .a
endif

ifeq ($(OSNAME),HP-UX)
  SHARED_SUFFIX   = .sl
endif

STATIC_CXXFLAGS =
STATIC_CPPFLAGS =
STATIC_LDFLAGS  =

# Compiler and linker flags for multi-threading; use undocumented 
# [though long implemented] gcc option -pthread which defines _REENTRANT;
# option is named -pthreads for gcc on Sun/Solaris
MULTI_CPPFLAGS_POSIX   = -pthread

ifeq ($(OSNAME),SunOS)
  MULTI_CPPFLAGS_POSIX = -pthreads
endif

MULTI_CPPFLAGS_SOLARIS = -threads
MULTI_CPPFLAGS_DCE     = 

MULTI_LDFLAGS_POSIX    = -pthread

ifeq ($(OSNAME),SunOS)
  MULTI_LDFLAGS_POSIX  = -pthreads
endif

MULTI_LDFLAGS_SOLARIS  = -threads
MULTI_LDFLAGS_DCE      = 

# Posix
MULTI_CPPFLAGS = $(MULTI_CPPFLAGS_POSIX)
MULTI_LDFLAGS  = $(MULTI_LDFLAGS_POSIX)

SINGL_CPPFLAGS =
SINGL_LDFLAGS  =

# wide (64-bit flags)
WIDE_CXXFLAGS  = -m64
WIDE_LDFLAGS   = -m64
WIDE_LDSOFLAGS = -m64
WIDE_ARFLAGS   =
