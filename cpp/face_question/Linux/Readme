
1. Linux中各种IO模型原理--select和epoll:
    (1) 阻塞IO : client等待server回复过程中会一直阻塞
    大部分接口是阻塞型的:系统调用(IO)不返回调用结果,并让线程一直阻塞,只有当该系统调用获得结果或者超市出错才返回.(多线程)
    对每一个客户端启一个线程或者进程:pthread_create() fork()
    (2) 非阻塞IO : 用户一直向内核询问是否准备好了数据
    (3) 多路复用IO : 事件驱动IO,select和epoll会不断轮询所负责的所有socket

2. 阻塞和非阻塞I/O区别；
3. linux系统文件机制；
4. 多进程同步方式；
5. 使用过哪些进程间通讯机制,并详细说明(重点)；
6. linux系统的各类异步机制；
7. 信号：列出常见的信号，信号怎么处理？
8. i++是否原子操作？
9. exit() _exit()的区别？
10. 如何实现守护进程？
11. linux的内存管理机制是什么？
12. linux的任务调度机制是什么？
13. 系统如何将一个信号通知到进程？
14. 什么是死锁?如何避免死锁？
15. 共享内存的使用实现原理；
16. 多线程和多进程的区别(从cpu调度,上下文切换,数据共享,多核cup利用率,资源占用,等等各方面回答.哪些东西是一个线程私有的?答案中必须包含寄存器)；
17. 标准库函数和系统调用的区别？
