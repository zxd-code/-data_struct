Realize a stack (either based on array or linked-list), beside pop/push,
provide min to access the minimum element stored.
All the three operations pop/push/min should performed in O(1) time.

Solution:

The intuitive idea is to record the minimum elemement in a varable. Each time when push a new element,
we compare and update the minimum. However, if the top element is the minimum, and it is popped.
We need scan all the rest elements to find a new minimum. So the pop method can't be ensured in O(1).

Another idea is to use a heap to manage the elements, this improves the pop operation to logarithm O(lg n).
But it is still not O(1).

Let's extend the original idea of recording the minimum element. When push a new element, and we find
it is less than the current minimum one recorded so far, instead update and drop the previous minimum.
We can keep the previous minimum one, so that when this element is popped later, we can resume
the previous minimum. We have several methods to do this:

1. We augment each stack element with a field, record the minimum elements so far when the element is
   pushed to the stack. The following example lines illustrate some operations:
     empty
     push 6: [(6, 6)]
     push 8: [(6, 6), (8, 6)]
     push 0: [(6, 6), (8, 6), (0, 0)]
     push 7: [(6, 6), (8, 6), (0, 0), (7, 0)]
     pop: [(6, 6), (8, 6), (0, 0)]
     pop: [(6, 6), (8, 6)]

2. Instead of record the minimum so far in each element, we can augment a pointer to each element.
   The pointer points to the minimum so far when this element is pushed.

3. Use another stack to record the minimum elements updated during the push/pop operations. The
   top element is the latest minimum one. If push a new element, and it is smaller, then we push
   it to the minimum stack as well. Later when we pop it. We pop it from both stacks.
     empty empty
     push 6: [6], [6]
     push 8: [6, 8], [6]
     push 0: [6, 8, 0], [6, 0]
     push 7: [6, 8, 0, 7], [6, 0]
     pop: [6, 8, 0], [6, 0]
     pop: [6, 8], [6]
