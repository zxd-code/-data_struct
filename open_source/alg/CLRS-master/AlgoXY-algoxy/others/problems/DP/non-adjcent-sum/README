Given a list of non-negative integers. Determine the maximum sum composed by numbers that none of them are adjacent.

X = {x1, x2, ..., xn}, xi >=0, find a sub-list Y = {xi, xj, ..., xm} that any xi in Y, neither x{i-1} nor x{i+1} in Y. Maximize sum(Y).



Lazy infinite solution:

For any non-negative infinite sequence X = {x[1], x[2], ....}, denote m[i] as the max sum of non-adjacent elements till x[i], say: m[i] is the max-sums of {x[1], x[2], ...., x[i]} without any adjacent elements.

Specially, m[0] is max-sums of empty list, we have two trivial cases:

  m[0] = 0, m[1] = x[1]

For any i > 1, we have the recursive case:

  m[i] = max (x[j] + m[j-2]) and m[j-1]

This remind us the famous Fibonacci infinite definition:

F = 0, 1, zip(+, F, F',)

This equation can be explained as the following table:

  F : 0, 1, 1, 2, 3, 5 , 8 , ...
  F': 1, 1, 2, 3, 5, 8 , 13, ...
zip+: 1, 2, 3, 5, 8, 13, 21, ...

We can do the same job with this problem. Put all m[i] together, we have an infinite list as M = {m[0], ,m[1], m[2], ....}, Removing the first m[0], denote the rest as M' = {m[1], m[2], m[3], ...}, we can draw a table like the following:

X:        x[1], x[2], x[3], ...
M:     0, x[1], m[2], ....
M': x[1], m[2], m[3], ...

And here is the recursive definition of the infinite sequence M:

M = 0, x[1], zip(lambda(x', m, m') => max(x'+m, m'), X', M, M')

Refer to the Haskell example program (MaxSum.hs) for the realization.
