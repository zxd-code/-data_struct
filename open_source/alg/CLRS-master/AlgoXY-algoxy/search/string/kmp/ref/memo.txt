http://twan.home.fmf.nl/blog/haskell/Knuth-Morris-Pratt-in-Haskell.details

- According to http://twan.home.fmf.nl/blog/haskell/Knuth-Morris-Pratt-in-Haskell.details                                   
-- this algo should give better performance than the "naive" one but my tests show no                                        
-- difference in running time. Either                                                                                        
---   the naive algo gives performance as good as KMP,                                                                       
--    or the optimized algo isn't quite right.                                                                               
--    Or I could be missing something.                                                                                       
isSubstringOf2 as bs = any done $ scanl next (makeTable as) bs

makeTable :: Eq a => [a] -> KMP a
makeTable xs = table
   where table = makeTable' xs (const table)
makeTable' []     failure = KMP True failure
makeTable' (x:xs) failure = KMP False test
   where  test  c = if c == x then success else failure c
          success = makeTable' xs (next (failure x))

data KMP a = KMP
      { done :: Bool
      , next :: (a -> KMP a)
      }



and another one:
http://www.haskell.org/haskellwiki/Runtime_compilation